---
// src/components/carousel/Carousel.astro
import { Image } from 'astro:assets';
import type { ImageMetadata } from 'astro:assets';

// 1. Usamos la interfaz correcta de Astro Assets
interface Props {
  images: ImageMetadata[];
}
const { images = [] } = Astro.props;
---

<!-- La estructura HTML es la misma que la tuya -->
<div class="carousel-container" aria-roledescription="carousel">
  <div class="carousel-slides">
    {images.map((img, i) => (
      <div class:list={["carousel-slide", { 'active': i === 0 }]}>
        
        <!-- 2. AQUÍ ESTÁ EL CAMBIO CLAVE: Usamos el componente <Image> -->
        <Image
          src={img}
          alt={`Imagen del carrusel ${i + 1}`}
          widths={[480, 800, 1200]}
          sizes="(min-width: 768px) 800px, 100vw"
          loading={i === 0 ? "eager" : "lazy"}
          quality="high"
        />

      </div>
    ))}
  </div>

  <!-- Mostramos botones y puntos solo si hay más de una imagen -->
  {images.length > 1 && (
    <>
      <button class="carousel-button prev" aria-label="Diapositiva anterior">‹</button>
      <button class="carousel-button next" aria-label="Siguiente diapositiva">›</button>

      <div class="carousel-dots">
        {images.map((_, i) => (
          <button class:list={["dot", { 'active': i === 0 }]} data-slide-to={i} aria-label={`Ir a la diapositiva ${i + 1}`}></button>
        ))}
      </div>
    </>
  )}
</div>

<!-- 3. Tu script, mejorado para ser compatible con la navegación de Astro -->
<script>
  function initializeCarousel(carouselContainer: HTMLElement) {
    // Evitamos reinicializar un carrusel que ya está funcionando
    if (carouselContainer.dataset.initialized) return;
    carouselContainer.dataset.initialized = 'true';

    let currentIndex = 0;
    const slides = carouselContainer.querySelectorAll<HTMLElement>('.carousel-slide');
    const dots = carouselContainer.querySelectorAll<HTMLButtonElement>('.dot');
    const totalSlides = slides.length;
    
    // Si no hay imágenes o solo hay una, no hacemos nada más.
    if (totalSlides <= 1) return;

    const intervalTime = 10000; // 10 segundos
    let slideInterval: number;

    function updateCarousel() {
      slides.forEach((slide, index) => {
        slide.classList.toggle('active', index === currentIndex);
      });
      dots.forEach((dot, index) => {
        dot.classList.toggle('active', index === currentIndex);
      });
    }

    function showNextSlide() {
      currentIndex = (currentIndex + 1) % totalSlides;
      updateCarousel();
    }

    function showPrevSlide() {
      currentIndex = (currentIndex - 1 + totalSlides) % totalSlides;
      updateCarousel();
    }

    function startSlideShow() {
      clearInterval(slideInterval); // Limpiamos por si acaso
      slideInterval = window.setInterval(showNextSlide, intervalTime);
    }
    
    function stopSlideShow() {
      clearInterval(slideInterval);
    }

    const nextButton = carouselContainer.querySelector<HTMLButtonElement>('.next');
    const prevButton = carouselContainer.querySelector<HTMLButtonElement>('.prev');
    
    nextButton?.addEventListener('click', () => {
      stopSlideShow();
      showNextSlide();
    });

    prevButton?.addEventListener('click', () => {
      stopSlideShow();
      showPrevSlide();
    });

    dots.forEach(dot => {
      dot.addEventListener('click', () => {
        const slideIndex = parseInt(dot.dataset.slideTo || '0', 10);
        if (slideIndex !== currentIndex) {
          stopSlideShow();
          currentIndex = slideIndex;
          updateCarousel();
        }
      });
    });
    
    updateCarousel();
    startSlideShow();
  }

  // Ejecutamos la inicialización en la carga inicial de la página
  document.querySelectorAll<HTMLElement>('.carousel-container').forEach(initializeCarousel);
  
  // Y también la volvemos a ejecutar después de cada cambio de página con Astro View Transitions
  document.addEventListener('astro:page-load', () => {
    document.querySelectorAll<HTMLElement>('.carousel-container').forEach(initializeCarousel);
  });
</script>

<!-- Tus estilos se mantienen exactamente igual. Son perfectos. -->
<style>
  /* ==========================================================================
     Estilos Base (Mobile-First)
     ========================================================================== */
  .carousel-container {
    --carousel-aspect-ratio: 16 / 9;
    --carousel-transition-duration: 0.7s;
    position: relative;
    width: 100%;
    margin: 1.5rem auto;
  }
  .carousel-slides {
    position: relative;
    overflow: hidden;
    border-radius: 0.75rem;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    aspect-ratio: var(--carousel-aspect-ratio);
    background-color: #252525;
  }
  .carousel-slide {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    opacity: 0;
    transition: opacity var(--carousel-transition-duration) ease-in-out;
    pointer-events: none;
  }
  .carousel-slide.active {
    opacity: 1;
    pointer-events: auto;
  }
  /* Importante: El selector ahora apunta a cualquier img DENTRO del slide */
  .carousel-slide img {
    display: block;
    width: 100%;
    height: 100%;
    object-fit: cover; 
  }
  .carousel-button {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    z-index: 10;
    background-color: rgba(0, 0, 0, 0.5);
    color: white;
    border: none;
    border-radius: 50%;
    cursor: pointer;
    width: 2.5rem;
    height: 2.5rem;
    font-size: 1.25rem;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: background-color 0.2s ease;
  }
  .carousel-button:hover {
    background-color: rgba(0, 0, 0, 0.8);
  }
  .carousel-button.prev { left: 0.5rem; }
  .carousel-button.next { right: 0.5rem; }
  .carousel-dots {
    position: absolute;
    bottom: 0.75rem;
    left: 50%;
    transform: translateX(-50%);
    z-index: 10;
    display: flex;
    gap: 0.5rem;
  }
  .dot {
    width: 10px;
    height: 10px;
    border-radius: 50%;
    background-color: rgba(255, 255, 255, 0.5);
    border: 1px solid rgba(0, 0, 0, 0.2);
    cursor: pointer;
    padding: 0;
    transition: background-color 0.2s ease;
  }
  .dot.active {
    background-color: white;
  }
  @media (min-width: 768px) {
    .carousel-container {
      max-width: 800px; 
    }
    .carousel-button.prev { left: 1rem; }
    .carousel-button.next { right: 1rem; }
    .dot:hover {
        background-color: rgba(255, 255, 255, 0.8);
    }
  }
</style>